
plugins {
    id "com.diffplug.gradle.spotless" version "3.26.1"
    id "io.freefair.lombok" version "5.1.0"
    id 'io.codearte.nexus-staging' version '0.22.0'
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'

repositories {
    mavenCentral()
}

// remember project name is indicated in settings.gradle

// group is necessary
group = 'io.github.nicolas-van'

// the current version
version = '1.0.2'

java {
    withJavadocJar()
    withSourcesJar()
}

spotless {
  java {
    googleJavaFormat('1.7').aosp()
  }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from(components.java)
            
            groupId rootProject.group
            artifactId rootProject.name
            version rootProject.version

            pom {
                name = rootProject.name
                // some info about the project
                description = 'A simple library implementing an event emitter in Java.'
                url = 'https://github.com/nicolas-van/eventemitter#readme'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'nicolas-van'
                        name = 'Nicolas Vanhoren'
                    }
                }
                scm {
                    url = 'https://github.com/nicolas-van/eventemitter.git'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username System.getenv("SONATYPE_USERNAME")
                password System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(System.getenv("MVN_PGP_PRIVATE_KEY"), System.getenv("MVN_PGP_PRIVATE_KEY_PASSWORD"))
    sign publishing.publications.MyPublication
}

nexusStaging {
    username System.getenv("SONATYPE_USERNAME")
    password System.getenv("SONATYPE_PASSWORD")
}
